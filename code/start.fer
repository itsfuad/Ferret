let a = 10;
a;
let b = 20;
a, b;
a + b;
let answer = (a + b) * 2;

let myvar = 0;

let arr : [][]i32 = [[1, 2, 3], [4, 5, 6]];

let a1, a2, a3 = 1;

type Point struct {
    x: i32,
    y: i32
};

let point: Point = @Point{x: 10, y: 20};

// future features
// //point as value
// fn (p: Point) distanceToOrigin() -> f32 {
//     return sqrt(p.x * p.x + p.y * p.y);
// }

// //point as reference
// fn (p: &Point) translate(dx: i32, dy: i32) {
//     p.x += dx;
//     p.y += dy;
// }

// let p = Point{x: 10, y: 20};
// p.x = 100;
// a = p.y;
//p.translate(10, 20);

//anonymous struct
let p2 = @struct {
    name: "Abir",
    age: 23
};

let p3: struct { name: str, age: i32 } = @struct{name: "John", age: 20};

fn add(a: i32, b: i32) -> i32 {
    return a + b;
}

const add3 = fn(a: i32, b: i32) -> i32 {
    return a + b;
};

fn mul(a: i32, b: i32) -> (i32, bool) {
    return a * b, true;
}

fn outer() -> fn(x: i32) -> i32 {
    return fn(x: i32) -> i32 {
        return x * 2;
    };
}

fn hello() {
    // do something
}

//call
hello(1, 2, 4);

let sum = add(1, 2);
let res, ok: i32, bool = mul(1, 2);

if ok {
    hello();
} else {
    hello();
}

//anonymous function
fn(){}

//named function
fn distanceToOrigin(p: Point) -> f32 {
    return 1.3;
}

//method
fn (p: Point, x: i32) distanceToOrigin(p: i32) -> f32 {
    return 1.3;
}

point.distanceToOrigin();

type INode interface {
    fn show(),
    fn length() -> i32
};

let node: INode = @INode{show: fn() {}, length: fn() -> i32 { return 10 }};